using System;
using System.Linq;
using System.Threading.Tasks;

// added manually
using Microsoft.Dynamics.DataEntities; //Resources
using Microsoft.Identity.Client; //Nuget Package: IConfidentialClientApplication, ConfidentialClientApplicationBuilder, AuthenticationResult
using Microsoft.OData.Client; //DataServiceQueryException, DataServiceClientException
using System.Web; //Manually browsed and added reference to System.Web: HttpUtility
using System.Text.Json; //JsonSerializer

namespace ConsoleApp1
{
    class Program
    {
        static string aadClientAppId = "c358f8ce-0eaa-4817-a6e4-a3d0bd2a235a"; // Azure App Client ID
        static string aadClientAppSecret = "54V7Q~njEZVZmfafQg1nBy_eCPWckSkvBF6AP"; // Azure App Secret
        static string baseURL = "https://finance-scm-developbe9e4f355f44335adevaos.cloudax.dynamics.com"; // D365FO instance no slash at end
        static string aadTenant = "https://login.windows.net/microsoft.com"; //replace domain.com with your azure AD domain

        // private static async Task GetAuthenticationHeader()
        private static async Task<string> GetAuthenticationHeader()
        {
            IConfidentialClientApplication app = ConfidentialClientApplicationBuilder.Create(aadClientAppId)
                    .WithClientSecret(aadClientAppSecret)
                    .WithAuthority(new Uri(aadTenant))
                    .Build();
            string[] scopes = new string[] { $"{baseURL}/.default" };
            AuthenticationResult result = await app.AcquireTokenForClient(scopes).ExecuteAsync();
            return result.CreateAuthorizationHeader();
        }

        private static void ReportODataError(DataServiceQueryException ex)
        {
            //Client level Exception message
            Console.WriteLine(ex.Message);

            //The InnerException of DataServiceQueryException contains DataServiceClientException
            DataServiceClientException dataServiceClientException = ex.InnerException as DataServiceClientException;

            // You can get ODataErrorException from dataServiceClientException.InnerException
            // This object holds Exception as thrown from the service
            // ODataErrorException contains odataErrorException.Message contains a message string that conforms to dotnet
            // Exception.Message standards
            var odataErrorException = dataServiceClientException.InnerException as Microsoft.OData.ODataErrorException;
            if (odataErrorException != null)
            {
                Console.WriteLine(odataErrorException.Message);
            }

            Console.WriteLine(dataServiceClientException.Message);
        }

        static void Main(string[] args)
        {
            try
            {
                MainAsync().Wait();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine(ex);
            }

            Console.ReadLine();
        }


        private static async Task MainAsync()
        {
            Console.WriteLine("Authenticating with AAD...");
            //AuthenticationConfig config = AuthenticationConfig.ReadFromJsonFile("appsettings.json");
            string bearerToken = await GetAuthenticationHeader();

            var context = new Resources(new Uri($"{baseURL}/data/"));

            //Example to make all the OData requests cross-company, otherwise you will only reference records in the default company
            context.BuildingRequest += (sender, eventArgs) =>
            {
                var uriBuilder = new UriBuilder(eventArgs.RequestUri);
                var paramValues = HttpUtility.ParseQueryString(uriBuilder.Query);
                if (paramValues.Get("cross-company") != null)
                {
                    //Console.WriteLine("Note: cross-company parameter already present - removing");
                    paramValues.Remove("cross-company");
                }
                paramValues.Add("cross-company", "true");
                uriBuilder.Query = paramValues.ToString();
                eventArgs.RequestUri = uriBuilder.Uri;
            };

            //Add authorization token. This should be requested from AAD programatically, expiry managed, etc.
            context.SendingRequest2 += (sender, eventArgs) =>
            {
                eventArgs.RequestMessage.SetHeader("Authorization", bearerToken);
            };


            //Read DE-001 customer for example
            Console.WriteLine("Reading the customer...");
            try
            {
                var customer = context.CustomersV3.Where(x => x.DataAreaId == "usmf" && x.CustomerAccount == "DE-001").First();
                Console.WriteLine(JsonSerializer.Serialize(customer));
            }
            catch (DataServiceQueryException queryException)
            {
                ReportODataError(queryException);
            }

            catch (DataServiceClientException clientException)
            {
                Console.WriteLine(clientException.InnerException);
            }

            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                Console.WriteLine(ex.InnerException);
            }

            Console.ReadKey();
            Console.Clear();

            //Read customer groups with Linq syntax
            Console.WriteLine("Reading customer groups with Id '40'");
            try
            {
                var custGroups = context.CustomerGroups.Where(x => x.DataAreaId == "usmf" && x.CustomerGroupId == "40");

                CustomerGroup custGroup = new CustomerGroup();
                int num = 0;
                foreach (var group in custGroups)
                {
                    num++;
                    Console.WriteLine("{0} {1}", group.DataAreaId, group.CustomerGroupId);
                    if (num == 1)
                    {
                        custGroup = group; //Keep the first one
                    }
                }
                //Other ways to query specific record
                //var custGroup = context.CustomerGroups.Where(x => x.dataAreaId == "ussi" && x.CustomerGroupId == "10").First(); //Exception if none found
                //var custGroup = context.CustomerGroups.Where(x => x.dataAreaId == "ussi" && x.CustomerGroupId == "10").Single(); //Exception if more than one
                //var custGroup = context.CustomerGroups.ByKey(new Dictionary<string, object>() { { "dataAreaId", "ussi" }, { "CustomerGroupId", "10" } }).GetValue();
                Console.WriteLine("The first group was {0}", JsonSerializer.Serialize(custGroup));
            }
            catch (DataServiceQueryException ex)
            {
                ReportODataError(ex);
            }

            Console.ReadKey();
            Console.Clear();

            //Create a customer group
            Console.WriteLine("Creating customer group...");
            context.AddToCustomerGroups(new CustomerGroup
            {
                DataAreaId = "usmf",
                CustomerGroupId = "99",
                Description = "Console app test",
                PaymentTermId = "Net30"
            });
            try
            {
                DataServiceResponse responses = context.SaveChanges(); //No way to add a cross-company query option, so use BuildingRequest event if needed
                foreach (var response in responses) //non-empty response body if HTTP response isn't 204 (No Content)
                {
                    Console.WriteLine("HTTP status = {0}", response.StatusCode); //We expect a 201
                    var changeResponse = (ChangeOperationResponse)response;
                    var entityDescriptor = (EntityDescriptor)changeResponse.Descriptor;
                    var custGroupCreated = (CustomerGroup)entityDescriptor.Entity;
                    Console.WriteLine(JsonSerializer.Serialize(custGroupCreated));
                }

            }
            catch (DataServiceQueryException ex)
            {
                ReportODataError(ex);
            }

            Console.ReadKey();
            Console.Clear();

            //Read and update the new customer group
            Console.WriteLine("Reading the new customer group...");
            try
            {
                var custGroup = context.CustomerGroups.Where(x => x.DataAreaId == "usmf" && x.CustomerGroupId == "99").First();
                Console.WriteLine(JsonSerializer.Serialize(custGroup)); //Should be the same as the response Json after creation

                Console.WriteLine("Updating Customer group...");
                custGroup.Description = "Console app test updated";
                context.UpdateObject(custGroup);
                DataServiceResponse dsr = context.SaveChanges();
                var changeResponse = (ChangeOperationResponse)dsr.First();
                Console.WriteLine("HTTP status = {0}", changeResponse.StatusCode); //We expect a 204
                var entityDescriptor = (EntityDescriptor)changeResponse.Descriptor;
                var custGroupUpdated = (CustomerGroup)entityDescriptor.Entity; //The response body is empty, so this is inferred, not actually sent back to us
                Console.WriteLine(JsonSerializer.Serialize(custGroupUpdated));
            }
            catch (DataServiceQueryException ex)
            {
                ReportODataError(ex);
            }

            Console.ReadKey();
            Console.Clear();

            //Read the customer group again, then delete it
            Console.WriteLine("Re-reading Customer group...");
            try
            {
                var custGroupUpdated = context.CustomerGroups.Where(x => x.DataAreaId == "usmf" && x.CustomerGroupId == "99").First();
                Console.WriteLine(JsonSerializer.Serialize(custGroupUpdated)); //Should be identical to the previously inferred Json

                Console.WriteLine("Deleting Customer group...");
                context.DeleteObject(custGroupUpdated);
                DataServiceResponse dsr = context.SaveChanges();
                Console.WriteLine("HTTP status = {0}", dsr.First().StatusCode); //We expect a 204
            }
            catch (DataServiceQueryException ex)
            {
                ReportODataError(ex);
            }

            Console.ReadKey();
            Console.Clear();

            //Make sure the customer group is gone
            Console.WriteLine("Testing that Customer group has been deleted...");
            try
            {
                var custGroupsAfterDelete = context.CustomerGroups.Where(x => x.DataAreaId == "usmf" && x.CustomerGroupId == "99");
                Console.WriteLine("Records found = {0}", custGroupsAfterDelete.Count());
            }
            catch (DataServiceQueryException ex)
            {
                ReportODataError(ex);
            }
            Console.WriteLine("All done!");
        }
    }
}
